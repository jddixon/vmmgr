#!/usr/bin/python3
#
# ~/dev/py/vmmgr/vmUpdate

import boto3, os, sys
from argparse   import ArgumentParser
from vmmgr   import *

def doIt(args):

    force       = args.force
    testing     = args.testing
    verbose     = args.verbose
    regions     = args.regions

    # XXX WORKING HERE

def main():
    """
    Expect a command like
        vmUpdate [options] [region [ region]*]

    """

    # program defaults ----------------------------------------------

    # parse the command line ----------------------------------------

    DESC = 'NEED BRIEF DESC'
    parser = ArgumentParser(description=DESC)

    parser.add_argument('-A', '--allEntities', action='store_true',
        help='initialize all instances and volumes')
    parser.add_argument('-D', '--allVolumes', action='store_true',
        help='initialize all volumes')
    parser.add_argument('-I', '--allInstances', action='store_true',
        help='initialize all instances')
    parser.add_argument('-N', '--allNetworks', action='store_true',
        help='initialize all networks')
    parser.add_argument('-R', '--allRegions', action='store_true',
        help='initialize all regions')

    parser.add_argument('-f', '--force', action='store_true',
        help='force action on otherwise protected entity')

    parser.add_argument('-j', '--justShow', action='store_true',
        help='show options and exit')

    parser.add_argument('-T', '--testing', action='store_true',
        help='this is a test run')

    parser.add_argument('-V', '--showVersion', action='store_true',
        help='print version info and exit')

    parser.add_argument('-v', '--verbose', action='store_true',
        help='be chatty')

    parser.add_argument('-z', '--doNothing', action='store_true',
        help="just report problems, don't change anything")

    parser.add_argument('regions', nargs='*',
        help='any number of valid region names')

    args = parser.parse_args()

    # fixups --------------------------------------------------------
    if args.allEntities:
        args.allInstances = True
        args.allNetworks  = True
        args.allRegions   = True
        args.allVolumes   = True

    # arguments are interpreted relative to the regions ---
    # list, so we settle this first
    if args.allRegions:
        if len(args.regions) > 0:
            print ('all regions selected, so ignoring region name(s) provided')
            args.regions = []
        args.regions = REGIONS
    else:
        for region in args.regions:
            if not _validRegion(region):
                print(("dropping %s: it's not a valid AWS region" % region))
                args.regions.remove(region)

    if len(args.regions) == 0:
        args.regions = ['us-east-1']

    args.regions.sort()

    # sanity checks -------------------------------------------------

    # complete setup ------------------------------------------------
    appName = 'vmUpdate %s' % __version__

    if args.showVersion:
        print(("%s %s" % (appName, __version_date__)))
        sys.exit(0)

    if args.verbose or args.justShow:
        print('allEntities        = ' + str(args.allEntities))
        print('  allInstances     = ' + str(args.allInstances))
        print('  allNetworks      = ' + str(args.allNetworks))
        print('  allRegions       = ' + str(args.allRegions))
        print('  allVolumes       = ' + str(args.allVolumes))
        print('doNothing          = ' + str(args.doNothing))
        print('force              = ' + str(args.force))
        print('testing            = ' + str(args.testing))
        print('verbose            = ' + str(args.verbose))

        if len(args.regions) > 0:
            print('regions:')
            for region in args.regions:
                print("    %s" % region)


    if args.justShow:
        sys.exit(0)

    # do what's required --------------------------------------------
    doIt(args)


if __name__ == '__main__':
    main()

